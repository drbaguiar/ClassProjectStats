}
alpha = 0.05
diff.bootstrap = NULL
for (i in 1 : n) {
# Sample with replacement (bootstrapping is with replacement)
a.bootstrap = sample  (a, length(a), TRUE)
b.bootstrap = sample  (b, length(b), TRUE)
diff.bootstrap[i] = mean(b.bootstrap) - mean(a.bootstrap)
}
plot(density(a.bootstrap), lwd=3, col="steelblue")
abline(v=sum(a), lwd=3, col='gold')
sum(a)
mean(a)
abline(v=mean(a), lwd=3, col='gold')
abline
?aabline
?abline
simpleboot<-function(x,stat,reps=1000) {
cat("Bootstrapping can go wrong!\n")
cat("This simple function will not show you warning messages.\n")
cat("Check results closely and be prepared to consult a statistician.\n")
if(stat=="max" | stat=="min") { warning("Bootstrap is likely to fail for minima and maxima") }
require(boot)
eval(parse(text=eval(substitute(paste("p.func<-function(x,i) ",stat,"(x[i])",sep=""),list(stat=stat)))))
myboots<-boot(x,statistic=p.func,R=reps,stype="i")
hist(bmed$t,breaks=25,main="EDF from bootstrap",xlab=stat)
suppressWarnings(return(list(replicates=reps,point.estimate=myboots$t0,normal.ci=c(boot.ci(myboots)$normal[2],boot.ci(myboots)$normal[3]),
percent.ci=c(boot.ci(myboots)$percent[4],boot.ci(myboots)$percent[5]),
bca.ci=c(boot.ci(myboots)$bca[4],boot.ci(myboots)$bca[5]))))
}
# example:
mydata<-rchisq(25,df=3)
simpleboot(mydata,"median")
library(boot) #load the package
# Now we need the function we would like to estimate
# In our case the beta:
betfun = function(data,b,formula){
# b is the random indexes for the bootstrap sample
d = data[b,]
return(lm(d[,1]~d[,2], data = d)$coef[2])
# thats for the beta coefficient
}
# now you can bootstrap:
bootbet = boot(data="your data here", statistic=betfun, R=5000)
# R is how many bootstrap samples
names(bootbet)
plot(bootbet)
hist(bootbet$t, breaks = 100)
library(boot)
library(boot) #load the package
# Now we need the function we would like to estimate
# In our case the beta:
betfun = function(data,b,formula){
# b is the random indexes for the bootstrap sample
d = data[b,]
return(lm(d[,1]~d[,2], data = d)$coef[2])
# thats for the beta coefficient
}
# now you can bootstrap:
bootbet = boot(data="your data here", statistic=betfun, R=5000)
# R is how many bootstrap samples
names(bootbet)
plot(bootbet)
hist(bootbet$t, breaks = 100)
library(boot) #load the package
# Now we need the function we would like to estimate
# In our case the beta:
betfun = function(data,b,formula){
# b is the random indexes for the bootstrap sample
d = data[b,]
return(lm(d[,1]~d[,2], data = d)$coef[2])
# thats for the beta coefficient
}
# now you can bootstrap:
bootbet = boot(data="your data here", statistic=betfun, R=5000)
# R is how many bootstrap samples
names(bootbet)
plot(bootbet)
hist(bootbet$t, breaks = 100)
library(boot) #load the package
# Now we need the function we would like to estimate
# In our case the beta:
betfun = function(data,b,formula){
# b is the random indexes for the bootstrap sample
d = data[b,]
return(lm(d[,1]~d[,2], data = d)$coef[2])
# thats for the beta coefficient
}
# now you can bootstrap:
bootbet = boot(data=mtcars, statistic=betfun, R=5000)
names(bootbet)
plot(bootbet)
hist(bootbet$t, breaks = 100)
bootbet
summary(betboot)
summary(bootbet)
zoombot = boot.array(bootbet, indices = T)
dim(zoombot)
hist(zoombot[1,], breaks = 100)
# this is the frequency of each index, [1,] for the first
#bootstrap run
> boot.huber <- function(data, indices, maxit=20){
+ data <- data[indices,] # select obs. in bootstrap sample
+ mod <- rlm(prestige ~ income + education, data=data, maxit=maxit)
+ coefficients(mod) # return coefficient vector
+ }
boot.huber <- function(data, indices, maxit=20){
data <- data[indices,] # select obs. in bootstrap sample
mod <- rlm(prestige ~ income + education, data=data, maxit=maxit)
coefficients(mod) # return coefficient vector
}
> library(boot)system.time(duncan.boot <- boot(Duncan, boot.huber, 1999, maxit=100))
[1] 86.58 0.30 87.01 NA NA
duncan.boot
library(boot)
system.time(duncan.boot <- boot(Duncan, boot.huber, 1999, maxit=100))
system.time(duncan.boot <- boot(Duncan, boot.huber, 1999, maxit=100))
Duncan
duncan
data(duncan)
data(Duncan)
t.test(a~b)
?t.test
t.test(a~b,paried=0)
t.test(a,b,paried=0)
t.test(a.bootstrap,b.bootstrap,paried=0)
data(sleep)
str(sleep)
tapply(extra, group, mean)
attach(sleep)
tapply(extra, group, mean)
tapply(extra, group, sd)
tapply(extra, group, length)
t.test(extra~group)
power.t.test(n=10, delta=(2.33-.75), sd=1.9, sig.level=.05,type="two.sample", alternative="two.sided")
R = 999
alpha = numeric(R)
for (i in 1:R) {
group1 = rnorm(10, mean=.75, sd=1.9)
group2 = rnorm(10, mean=2.33, sd=1.9)
alpha[i] = t.test(group1,group2)$p.value
}
alpha
mean(alpha)
mean(alpha<.05)
rm(alpha,group1,group2,i,R)
R= 999; scores = extra; t.values = numeric(R)
for (i in 1:R) {
index = sample(1:20, size=10, replace=F)
group1 = scores[index]
group2 = scores[-index]
t.values[i] = t.test(group1,group2)$statistic
}
t.values = abs(t.values)
mean(t.values<=1.8608)
summary(t.values)
for (i in 1:R) {
index = sample(1:20, size=10, replace=F)
group1 = scores[index]
group2 = scores[-index]
t.values[i] = t.test(group1,group2)$statistic
}
mean(t.values<=1.8608)
with(sleep, t.test(extra~group)$statistic)
extra~group
summary(extra~group)
tapply(extra, group, mean)
boxplot(tapply(extra, group, mean),group1,group2)
boxplot(tapply(extra, group, mean),group1,group2)
boxplot(tapply(extra, 1, mean),group1,group2)
boxplot(extra,group1,group2)
boxplot(extra,group1,group2)
dotplot(group1)
dotchart(group1)
dotchart(group1,group2)
dotchart(t.values)
abline(v=t.ref,lwd=3, col='gold')
t.ref = with(sleep, t.test(extra~group)$statistic)
abline(v=t.ref,lwd=3, col='gold')
?dotchart
dotchart(VADeaths, main = "Death Rates in Virginia - 1940")
op <- par(xaxs = "i")  # 0 -- 100%
dotchart(t(VADeaths), xlim = c(0,100),
main = "Death Rates in Virginia - 1940")
par(op)
op
?par
?sleep
boot.ci(group1)
library(boot)
boot.ci(group1)
boot.ci(t.values)
rats = c(10, 27,30, 40, 46, 51, 52, 104, 146)
mean(rats)
sd(rats)/3
for (i in 1:1000) {
rats.bootstrap = sample(rats, size=9, replace=T)
}
rats.bootstrap
for (i in 1:1000) {
rats.bootstrap[i] = sample(rats, size=9, replace=T)
}
wrnings
warnings
warnings()
rats.bootstrap
mean(rats.bootstrap)
mean(rats)
hist(rats)
hist(rats.bootstrap)
for (i in 1:1000) {
rats.bootstrap[i] = sample(rats, size=9, replace=T)t.values[i] = t.test(group1,group2)$statistic
}
for (i in 1:1000) {
rats.bootstrap[i] = sample(rats, size=9, replace=T)t.values[i] = t.test(group1,group2)$statistic
}
for (i in 1:1000) {
rats.bootstrap[i] = sample(rats, size=9, replace=T);t.values[i] = mean(rats.bootstrap[i])
}
t.values
hist(t.value)
hist(t.values)
mean(rats.bootstrap[991])
rats.bootstrap[991]
rats.bootstrap[991,0]
rats.bootstrap[991]
rats.bootstrap[1]
rats.bootstrap[1,9]
rats.bootstrap[1:9]
for (i in 1:1000) {
rats.bootstrap[i] = mean(sample(rats, size=9, replace=T))}
rats.bootstrap
hist(rats.bootstrap)
for (i in 1:1000) {
rats.bootstrap[i] = mean(sample(rats, size=9, replace=T))}
tdist(.05)
td(.05)
?tdist
?rnorm
?tnorm
rt(.05)
?rt
abline(v=qt(0.975,df=len(rats)-1)*sd(rats)/sqrt(len(rats)),lwd=3, col='red')
LEn
Len(rats)
abline(v=qt(0.975,df=length(rats)-1)*sd(rats)/sqrt(length(rats)),lwd=3, col='red')
abline(v=qt(0.025,df=length(rats)-1)*sd(rats)/sqrt(length(rats)),lwd=3, col='red')
abline(v=qt(0.025,df=length(rats)-1)*sd(rats)/sqrt(length(rats)),lwd=3, col='red')
qt(0.975,df=length(rats)-1)*sd(rats)/sqrt(length(rats)
)
qt(0.975,df=length(rats)-1)*sd(rats)/sqrt(length(rats))
qt(0.025,df=length(rats)-1)*sd(rats)/sqrt(length(rats))
alpha
alpha = .05
qt(1-alpha/2,df=length(rats)-1)*sd(rats)/sqrt(length(rats))
qt(alpha/2,df=length(rats)-1)*sd(rats)/sqrt(length(rats))
length(rates)
length(rats)
sd(rats)
mean(rats)+qt(alpha/2,df=length(rats)-1)*sd(rats)/sqrt(length(rats))
mean(rats)+qt(1-alpha/2,df=length(rats)-1)*sd(rats)/sqrt(length(rats))
sd(rats)/sqrt(length(rats))
load("~/GitHub/MyWork/MyData.Rdata")
install.packages("Rcmdr")
install.packages("scatterplot3d")
install.packages("hexbin")
require("lattice")
mtcars$cyl
?splom
super.sym <- trellis.par.get("superpose.symbol")
install.packages("gcluse")
install.packages("gclus")
?scatterplot
?scatterplot
?scatterplot()
if (!require("Rcmdr")) {
install.packages("Rcmdr")
}
if (!require("scatterplot3d")) {
install.packages("scatterplot3d")
}
if (!require("hexbin")) {
install.packages("hexbin")
}
if (!require("lattice")) {
install.packages("lattice")
}
if (!require("gclus")) {
install.packages("gclus")
}
attach(mtcars)
scatter3d(wt, disp, mpg)
Spinning 3D Scatterplots
plot3d(wt, disp, mpg, col="red", size=3)
q()
X <- rep("SCience",100)
x
X
?rep
X <-c(rep("science",),81rep("social science",129),rep(arts,53))
X <-c(rep("science",81),rep("social science",129),rep(arts,53))
X <-c(rep("science",81),rep("social science",129),rep("arts",53))
x
X
x <-c(rep("science",81),rep("social science",129),rep("arts",53))
source('C:/Users/bryan_000/SkyDrive/Stats - Book/OpenIntroStats2/probTables/code/normalProbTable.R')
source('C:/Users/bryan_000/SkyDrive/Stats - Book/OpenIntroStats2/probTables/code/chiSquareProbTable.R')
install.packages("xtable")
source('C:/Users/bryan_000/SkyDrive/Stats - Book/OpenIntroStats2/probTables/code/chiSquareProbTable.R')
source('C:/Users/bryan_000/SkyDrive/Stats - Book/OpenIntroStats2/probTables/code/normalProbTable.R')
source('~/GitHub/MyWork/Download.R')
evals
source('C:/Users/bryan_000/SkyDrive/Stats - Book/OpenIntroStats2/probTables/code/chiSquareProbTable.R')
cst
source('C:/Users/bryan_000/SkyDrive/Stats - Book/OpenIntroStats2/probTables/code/normalProbTable.R')
Z
z
Z
z
Z
rug()
str(cars)
hist(cars$dist)
rug(cars$dist)
hist(autos, col="lightblue", ylim=c(0,10))
cars <- c(1, 3, 6, 4, 9)
trucks <- c(2, 5, 4, 5, 12)
suvs <- c(4,4,6,6,16)
autos <- c(cars, trucks, suvs)
hist(autos, col="lightblue", ylim=c(0,10))
rug(autos)
with (cars (plot(speed, distance)))
library(lattice)
state = data.frame(state.x77, region=state.region)
xyplot(Life.Exp~Income|region, data=state, layout=c(4,1))
library(ggplot2)
data(mpg)
qplot(displ,hwy, data=mpg)
source('~/GitHub/ClassProjectExData/plot2.R')
source('~/GitHub/ClassProjectExData/plot1.R')
source('~/GitHub/ClassProjectExData/plot1.R')
source('~/GitHub/ClassProjectExData/plot2.R')
source('~/GitHub/ClassProjectExData/plot2.R')
rm(datatarget)
datetime
rm(data)
rm(datetime)
source('~/GitHub/ClassProjectExData/plot2.R')
data
source('~/GitHub/ClassProjectExData/plot2.R')
source('~/GitHub/ClassProjectExData/plot3.R')
source('~/GitHub/ClassProjectExData/plot3.R')
source('~/GitHub/ClassProjectExData/plot4.R')
source('~/GitHub/ClassProjectExData/plot4.R')
source('~/GitHub/ClassProjectExData/plot4.R')
source('~/GitHub/ClassProjectExData/plot4.R')
source('~/GitHub/ClassProjectExData/plot4.R')
source('~/GitHub/ClassProjectExData/plot3.R')
source('~/GitHub/ClassProjectExData/plot3.R')
source('~/GitHub/ClassProjectExData/plot1.R')
source('~/GitHub/ClassProjectExData/plot1.R')
exists("data")
!exists("data")
view(data)
View(data)
source('~/GitHub/ClassProjectExData/plot1.R')
View(data)
View(data)
data(,1)
data(1,)
data
data (1,1)
data[,1]
data[1,]
class(data)
names(data)
names(data) <-tolower(names(data))
names(data)
source('~/GitHub/ClassProjectExData/plot1.R')
names(data) <-tolower(names(data))
class(datafull)
rm(data)
source('~/GitHub/ClassProjectExData/plot1.R')
source('~/GitHub/ClassProjectExData/plot1.R')
source('~/GitHub/ClassProjectExData/plot1.R')
View(data)
source('~/GitHub/ClassProjectExData/plot1.R')
source('~/GitHub/ClassProjectExData/plot1.R')
source('~/GitHub/ClassProjectExData/plot2.R')
source('~/GitHub/ClassProjectExData/plot3.R')
source('~/GitHub/ClassProjectExData/plot4.R')
source('~/GitHub/ClassProjectExData/plot1.R')
source('~/GitHub/ClassProjectExData/plot1.R')
source('~/GitHub/ClassProjectExData/plot1.R')
source('~/GitHub/ClassProjectExData/plot1.R')
source('~/GitHub/ClassProjectExData/plot2.R')
source('~/GitHub/ClassProjectExData/plot4.R')
source('~/GitHub/ClassProjectExData/plot1.R')
View(data)
source('~/GitHub/ClassProjectExData/plot1.R')
source('~/GitHub/ClassProjectExData/plot1.R')
View(data)
source('~/GitHub/ClassProjectExData/plot1.R')
source('~/GitHub/ClassProjectExData/plot1.R')
names(datafull) <- gsub("_","",names(datafull))
names(datafull)
source('~/GitHub/ClassProjectExData/plot1.R')
names(datasub)
source('~/GitHub/ClassProjectExData/plot1.R')
source('~/GitHub/ClassProjectExData/plot1.R')
source('~/GitHub/ClassProjectExData/plot2.R')
rm(data)
source('~/GitHub/ClassProjectExData/plot2.R')
source('~/GitHub/ClassProjectExData/plot2.R')
source('~/GitHub/ClassProjectExData/plot3.R')
source('~/GitHub/ClassProjectExData/plot4.R')
rm(datasub)
source('~/GitHub/ClassProjectExData/plot4.R')
View(datasub)
rm(datasub)
rm(datetime)
source('~/GitHub/ClassProjectExData/plot2.R')
source('~/GitHub/ClassProjectExData/plot4.R')
source('~/GitHub/ClassProjectExData/plot3.R')
ls()
len(datasub)
length(datasub)
source('~/GitHub/ClassProjectExData/plot4.R')
source('~/GitHub/ClassProjectExData/plot4.R')
dim(x)
ls()
source('~/GitHub/ClassProjectExData/plot1.R')
dim(datasub)
names(datetime)
names(datasub)
dim(datetime)
ses
maj
x
?rug
names(datasub)
hist(globalreactivepower)
hist(datasub$globalreactivepower)
hist(datasub$globalactivepower)
rug
rug(datasub$globalactivepower)
gss <- read.table("./data/gss.csv", header = TRUE, sep =",")
gss <- read.table("./data/gss.csv", header = TRUE, sep =",")
library(car)
Anova(mpg~weight)
apply(mtcars)
mtcars
Anova(mpg~cyl, data=mtcars)
library(faraway)
data(coagulation, package="faraway")
coagulation
plot(coag ~ diet, coagulation,ylab="coagulation time")
stripchart(coag ~ diet, coagulation, vertical=TRUE, method="stack",xlab="diet",ylab="coagulation time")
library(faraway)
installpackages("faraway")
install.packages("faraway")
library(faraway)
data(coagulation, package="faraway")
coagulation
plot(coag ~ diet, coagulation,ylab="coagulation time")
stripchart(coag ~ diet, coagulation, vertical=TRUE, method="stack",xlab="diet",ylab="coagulation time")
getwd()
setwd("C:/Users/bryan_000/Documents/ClassProjectData")
setwd("C:/Users/bryan_000/Documents/GitHub/ClassProjectStats")
gss <- read.table("./data/gss.csv", header = TRUE, sep =",")
names(gss)
gss$homosex
boxplot(gss$educ)
abline(h=mean(gss$educ), col="Red")
mean(gss$edu)
mean(gss$educ)
mean(gss$educ, omit.na=1)
?mean
mean(gss$educ, na.rm=1)
boxplot(gss$educ)
abline(h=mean(gss$educ,omit.na=1), col="Red")
mean(gss$educ, na.rm=1)
abline(h=mean(gss$educ,omit.na=1), col="Red")
abline(h=mean(12.7), col="Red")
meduc <-mean(gss$educ,omit.na=1)
meduc
mean(gss$educ, na.rm=1)
boxplot(gss$educ)
abline(h=mean(gss$educ,na.rm=1), col="Red")
hist(gss$educ, xlab="Years of Education")
abline(mean(gss$educ, na.rm="True"), col="Red")
abline(mean(gss$educ,na.rm=1), col="Red")
?abline
abline(v=mean(gss$educ,na.rm=1), col="Red")
output <- aov(gss$educ~gss$xmarsex)
output
summary(output)
output2 <- oneway.test(gss$educ~gss$xmarsex)
output 2
output2
summary(output2)
coef(output2)
coef(output)
residuals(output)
mad(x)
mad(gss$educ)
mad(gss$educ, rm.na=1)
mad(gss$educ, na.rm=1)
install.packages("psyc")
install.packages("psych")
library(psych)
describe(gss)
